{"ast":null,"code":"var _jsxFileName = \"/Users/julianneaguilar/Desktop/web dev/assignment-4-juliannea/src/App.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport './styles/App.css';\nimport PokemonDisplay from './components/PokemonDisplay';\nimport GuessInput from './components/GuessInput';\nimport GuessCounter from './components/GuessCounter';\nimport { useState, createContext } from 'react';\n\n//----Creating global context to hold all info want to pass fown---//\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AppContext = /*#__PURE__*/createContext();\nfunction App() {\n  _s();\n  // Hint* Create a game state here and pass it along to the components as needed.\n  //       Think about how you want to model your data to represent the game state.\n\n  //current pokemon to guess state \n  const [currentPokemon, setCurrentPokemon] = useState(\"Pikachu\"); //first guess state\n  const [pokeID, setPokeID] = useState(1); //start with 1 for Pikachu\n  const [guess, setGuess] = useState(\"\");\n  const [pokeList, setPokeList] = useState([\"Pokemon\", \"Onix\", \"Clefairy\", \"Bulbasaur\", \"Charmander\", \"Squirtle\", \"Gengar\", \"Ditto\", \"Eevee\", \"Snorlax\"]);\n\n  //states for guess balls\n  const [firstBall, setFirstBall] = useState(true);\n  const [secBall, setSecBall] = useState(true);\n  const [thirdBall, setThirdBall] = useState(true);\n  const [resetGame, setResetGame] = useState(false);\n  const [newGame, setNewGame] = useState(false);\n  const [next, setNext] = useState(false);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n      value: {\n        firstBall,\n        setFirstBall,\n        secBall,\n        setSecBall,\n        thirdBall,\n        setThirdBall,\n        guess,\n        setGuess,\n        pokeList,\n        pokeID,\n        setPokeID,\n        resetGame,\n        setResetGame,\n        newGame,\n        setNewGame,\n        next,\n        setNext\n      },\n      children: [/*#__PURE__*/_jsxDEV(PokemonDisplay, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(GuessCounter, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(GuessInput, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"LNDA9NN4OxgdfYEmPILSG3CYZnw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","PokemonDisplay","GuessInput","GuessCounter","useState","createContext","jsxDEV","_jsxDEV","AppContext","App","_s","currentPokemon","setCurrentPokemon","pokeID","setPokeID","guess","setGuess","pokeList","setPokeList","firstBall","setFirstBall","secBall","setSecBall","thirdBall","setThirdBall","resetGame","setResetGame","newGame","setNewGame","next","setNext","className","children","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/julianneaguilar/Desktop/web dev/assignment-4-juliannea/src/App.js"],"sourcesContent":["import React from 'react';\nimport './styles/App.css';\nimport PokemonDisplay from './components/PokemonDisplay';\nimport GuessInput from './components/GuessInput';\nimport GuessCounter from './components/GuessCounter';\nimport { useState, createContext } from 'react';\n\n//----Creating global context to hold all info want to pass fown---//\nexport const AppContext = createContext();\n\nfunction App() {\n  // Hint* Create a game state here and pass it along to the components as needed.\n  //       Think about how you want to model your data to represent the game state.\n  \n  //current pokemon to guess state \n  const [currentPokemon, setCurrentPokemon] = useState(\"Pikachu\"); //first guess state\n  const [pokeID, setPokeID] = useState(1); //start with 1 for Pikachu\n  const [guess, setGuess] = useState(\"\");\n  const [pokeList, setPokeList] = useState([\"Pokemon\", \"Onix\", \"Clefairy\", \"Bulbasaur\", \"Charmander\", \"Squirtle\", \"Gengar\", \"Ditto\", \"Eevee\", \"Snorlax\"]);\n  \n  //states for guess balls\n  const [firstBall, setFirstBall] = useState(true);\n  const [secBall, setSecBall] = useState(true);\n  const [thirdBall, setThirdBall] = useState(true);\n  const [resetGame, setResetGame] = useState(false);\n  const [newGame, setNewGame] = useState(false);\n  const [next, setNext] = useState(false);\n\n  \n\n  return (\n    <div className=\"App\">\n    <AppContext.Provider value={{\n      firstBall, \n      setFirstBall, \n      secBall, \n      setSecBall,\n      thirdBall, \n      setThirdBall,\n      guess,\n      setGuess,\n      pokeList,\n      pokeID,\n      setPokeID,\n      resetGame,\n      setResetGame,\n      newGame,\n      setNewGame,\n      next,\n      setNext\n      }}>\n      <PokemonDisplay/>\n      <GuessCounter/>\n      <GuessInput/>\n\n    </AppContext.Provider>\n     \n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,kBAAkB;AACzB,OAAOC,cAAc,MAAM,6BAA6B;AACxD,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,YAAY,MAAM,2BAA2B;AACpD,SAASC,QAAQ,EAAEC,aAAa,QAAQ,OAAO;;AAE/C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,UAAU,gBAAGH,aAAa,CAAC,CAAC;AAEzC,SAASI,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA;;EAEA;EACA,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGR,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;EACjE,MAAM,CAACS,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EACzC,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACa,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,CAAC,SAAS,EAAE,MAAM,EAAE,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;;EAEvJ;EACA,MAAM,CAACe,SAAS,EAAEC,YAAY,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACiB,OAAO,EAAEC,UAAU,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACmB,SAAS,EAAEC,YAAY,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACqB,SAAS,EAAEC,YAAY,CAAC,GAAGtB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACuB,OAAO,EAAEC,UAAU,CAAC,GAAGxB,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACyB,IAAI,EAAEC,OAAO,CAAC,GAAG1B,QAAQ,CAAC,KAAK,CAAC;EAIvC,oBACEG,OAAA;IAAKwB,SAAS,EAAC,KAAK;IAAAC,QAAA,eACpBzB,OAAA,CAACC,UAAU,CAACyB,QAAQ;MAACC,KAAK,EAAE;QAC1Bf,SAAS;QACTC,YAAY;QACZC,OAAO;QACPC,UAAU;QACVC,SAAS;QACTC,YAAY;QACZT,KAAK;QACLC,QAAQ;QACRC,QAAQ;QACRJ,MAAM;QACNC,SAAS;QACTW,SAAS;QACTC,YAAY;QACZC,OAAO;QACPC,UAAU;QACVC,IAAI;QACJC;MACA,CAAE;MAAAE,QAAA,gBACFzB,OAAA,CAACN,cAAc;QAAAkC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC,eACjB/B,OAAA,CAACJ,YAAY;QAAAgC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC,eACf/B,OAAA,CAACL,UAAU;QAAAiC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEM;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEjB,CAAC;AAEV;AAAC5B,EAAA,CAjDQD,GAAG;AAAA8B,EAAA,GAAH9B,GAAG;AAmDZ,eAAeA,GAAG;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}